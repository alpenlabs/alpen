use std::fmt::Display;

use borsh::BorshDeserialize;
use serde::{de::DeserializeOwned, Serialize};

use crate::{input::ZkVmInputBuilder, proof::Proof, ProofType, VerificationKey, ZkVmResult};

/// A trait implemented by the prover ("host") of a zkVM program.
pub trait ZkVmHost: Send + Sync + Clone + Display + 'static {
    type Input<'a>: ZkVmInputBuilder<'a>;

    /// Executes the guest code within the VM, generating and returning the validity proof.
    fn prove<'a>(
        &self,
        input: <Self::Input<'a> as ZkVmInputBuilder<'a>>::Input,
        proof_type: ProofType,
    ) -> ZkVmResult<(Proof, VerificationKey)>;

    /// Extracts the raw public output from the given proof
    fn extract_raw_public_output(proof: &Proof) -> ZkVmResult<Vec<u8>>;

    /// Extracts the public output from the given proof using standard `serde`
    /// serialization/deserialization.
    fn extract_serde_public_output<T: Serialize + DeserializeOwned>(proof: &Proof)
        -> ZkVmResult<T>;

    /// Extracts the public output from the given proof assuming the data was serialized using
    /// Borsh.
    fn extract_borsh_public_output<T: BorshDeserialize>(proof: &Proof) -> ZkVmResult<T> {
        let raw = Self::extract_raw_public_output(proof)?;
        borsh::from_slice(&raw).map_err(|e| e.into())
    }

    /// Reuturns the Verification key for the loaded ELF program
    fn get_verification_key(&self) -> VerificationKey;

    /// Verifies the proof generated by the prover against the `program_id`.
    fn verify(&self, proof: &Proof) -> ZkVmResult<()>;
}
