use anyhow::Ok;
use express_zkvm::{Proof, ProverInput, ProverOptions, VerificationKey, ZKVMHost, ZKVMVerifier};
use serde::{de::DeserializeOwned, Serialize};
use serde_json::to_vec;
use sp1_sdk::{
    HashableKey, ProverClient, SP1Proof, SP1ProofWithPublicValues, SP1Stdin, SP1VerifyingKey,
};

/// A host for the `SP1` zkVM that stores the guest program in ELF format.
/// The `SP1Host` is responsible for program execution and proving
#[derive(Clone)]
pub struct SP1Host {
    elf: Vec<u8>,
    prover_options: ProverOptions,
}

impl ZKVMHost for SP1Host {
    fn init(guest_code: Vec<u8>, prover_options: ProverOptions) -> Self {
        SP1Host {
            elf: guest_code,
            prover_options,
        }
    }

    fn prove<T: serde::Serialize>(
        &self,
        prover_input: &ProverInput<T>,
    ) -> anyhow::Result<(Proof, VerificationKey)> {
        // Init the prover
        if self.prover_options.use_mock_prover {
            std::env::set_var("SP1_PROVER", "mock");
        }
        let client = ProverClient::new();
        let (pk, vk) = client.setup(&self.elf);

        // Setup the I/O
        let mut stdin = SP1Stdin::new();

        // Write user input
        for input in &prover_input.inputs {
            stdin.write(&input);
        }

        // Write serialized user input
        for serialized_input in &prover_input.serialized_inputs {
            stdin.write_slice(serialized_input);
        }

        // Learn more about aggregation at https://docs.succinct.xyz/writing-programs/proof-aggregation.html
        for agg_input in &prover_input.agg_inputs {
            let proof: SP1ProofWithPublicValues =
                bincode::deserialize(agg_input.proof().as_bytes())?;
            let vkey: SP1VerifyingKey = bincode::deserialize(agg_input.vk().as_bytes())?;

            // Write the verification key and the public values of the program that'll be proven
            // inside zkVM.
            // Note: The vkey is written here so we don't have to hardcode it in guest code.
            // TODO: This should be fixed once the guest code is finalized
            stdin.write(&vkey.hash_u32());
            stdin.write(&proof.public_values);

            // Write the proofs.
            //
            // Note: this data will not actually be read by the aggregation program, instead it will
            // be witnessed by the prover during the recursive aggregation process
            // inside SP1 itself.
            match proof.proof {
                SP1Proof::Compressed(compressed_proof) => {
                    stdin.write_proof(compressed_proof, vkey.vk);
                }
                _ => return Err(anyhow::anyhow!("can only handle compressed proofs")),
            }
        }

        // Start proving
        let mut prover = client.prove(&pk, stdin);
        if self.prover_options.enable_compression {
            prover = prover.compressed();
        }
        if self.prover_options.stark_to_snark_conversion {
            prover = prover.plonk();
        }

        let proof = prover.run()?;

        // Proof serialization
        let serialized_proof = bincode::serialize(&proof)?;
        let verification_key = bincode::serialize(&vk)?;

        Ok((
            Proof::new(serialized_proof),
            VerificationKey(verification_key),
        ))
    }
}

/// A verifier for the `SP1` zkVM, responsible for verifying proofs generated by the host
pub struct SP1Verifier;

impl ZKVMVerifier for SP1Verifier {
    fn verify(verification_key: &VerificationKey, proof: &Proof) -> anyhow::Result<()> {
        let proof: SP1ProofWithPublicValues = bincode::deserialize(proof.as_bytes())?;
        let vkey: SP1VerifyingKey = bincode::deserialize(&verification_key.0)?;

        let client = ProverClient::new();
        client.verify(&proof, &vkey)?;

        Ok(())
    }

    fn verify_with_public_params<T: DeserializeOwned + serde::Serialize>(
        verification_key: &VerificationKey,
        public_params: T,
        proof: &Proof,
    ) -> anyhow::Result<()> {
        let mut proof: SP1ProofWithPublicValues = bincode::deserialize(proof.as_bytes())?;
        let vkey: SP1VerifyingKey = bincode::deserialize(&verification_key.0)?;

        let client = ProverClient::new();
        client.verify(&proof, &vkey)?;

        let actual_public_parameter: T = proof.public_values.read();

        // TODO: use custom ZKVM error
        anyhow::ensure!(
            to_vec(&actual_public_parameter)? == to_vec(&public_params)?,
            "Failed to verify proof given the public param"
        );

        Ok(())
    }

    fn extract_public_output<T: Serialize + DeserializeOwned>(proof: &Proof) -> anyhow::Result<T> {
        let mut proof: SP1ProofWithPublicValues = bincode::deserialize(proof.as_bytes())?;
        let public_params: T = proof.public_values.read();
        Ok(public_params)
    }
}

// NOTE: SP1 prover runs in release mode only; therefore run the tests on release mode only
#[cfg(test)]
mod tests {
    use super::*;

    // Adding compiled guest code `TEST_ELF` to save the build time
    // #![no_main]
    // sp1_zkvm::entrypoint!(main);
    // fn main() {
    //     let n = sp1_zkvm::io::read::<u32>();
    //     sp1_zkvm::io::commit(&n);
    // }
    const TEST_ELF: &[u8] = include_bytes!("../tests/elf/riscv32im-succinct-zkvm-elf");

    #[test]
    fn test_mock_prover() {
        if cfg!(debug_assertions) {
            panic!("SP1 prover runs in release mode only");
        }

        let input: u32 = 1;

        let mut prover_input = ProverInput::new();
        prover_input.write(input);
        let zkvm = SP1Host::init(TEST_ELF.to_vec(), ProverOptions::default());

        // assert proof generation works
        let (proof, vk) = zkvm.prove(&prover_input).expect("Failed to generate proof");

        // assert proof verification works
        SP1Verifier::verify(&vk, &proof).expect("Proof verification failed");

        // assert public outputs extraction from proof  works
        let out: u32 =
            SP1Verifier::extract_public_output(&proof).expect("Failed to extract public outputs");
        assert_eq!(input, out)
    }

    #[test]
    fn test_mock_prover_with_public_param() {
        if cfg!(debug_assertions) {
            panic!("SP1 prover runs in release mode only");
        }

        let input: u32 = 1;

        let mut prover_input = ProverInput::new();
        prover_input.write(input);
        let zkvm = SP1Host::init(TEST_ELF.to_vec(), ProverOptions::default());

        // assert proof generation works
        let (proof, vk) = zkvm.prove(&prover_input).expect("Failed to generate proof");

        // assert proof verification works
        SP1Verifier::verify_with_public_params(&vk, input, &proof)
            .expect("Proof verification failed");
    }
}
