use strata_primitives::prelude::*;
use thiserror::Error;
use tracing::*;

/// Return type for worker messages.
pub type WorkerResult<T> = Result<T, WorkerError>;

#[derive(Debug, Error)]
pub enum WorkerError {
    #[error("missing block {0}")]
    MissingL2Block(L2BlockId),

    /// This usually means that we didn't execute the previous block.
    #[error("missing pre-state to execute block {0:?}")]
    MissingPreState(L2BlockCommitment),

    /// This might point to a database corruption or misused admin commands.
    /// The worker should not have tried to access block outputs that are
    /// missing.
    #[error("missing exec output for block {0:?}")]
    MissingBlockOutput(L2BlockCommitment),

    /// Missing write batch for a specific block, used for post-state reconstruction
    #[error("missing write batch for block {0}")]
    MissingWriteBatch(L2BlockId),

    /// This means that we haven't executed the block that's the terminal for an epoch.
    #[error("missing inner post-state of epoch {0} terminal {1:?}")]
    MissingEpochInnerPostState(u64, L2BlockCommitment),

    #[error("invalid execution payload for block {0:?}")]
    InvalidExecPayload(L2BlockCommitment),

    #[error("missing summary for epoch commitment {0:?}")]
    MissingEpochSummary(EpochCommitment),

    /// Generated by the worker handle when the worker has exited before being
    /// able to process a message we were trying to send.
    #[error("chain worker exited")]
    WorkerExited,

    #[error("block execution: {0}")]
    Exec(strata_chainexec::Error<Box<dyn std::error::Error + Send + Sync>>),

    #[error("EE block execution: {0}")]
    ExecEnvEngine(#[from] strata_eectl::errors::EngineError),

    #[error("missing required dependency: {0}")]
    MissingDependency(&'static str),

    #[error("shutdown before genesis")]
    ShutdownBeforeGenesis,

    #[error("genesis block not found at height 0")]
    MissingGenesisBlock,

    #[error("worker not initialized")]
    NotInitialized,

    #[error("unexpected error: {0}")]
    Unexpected(String),

    #[error("not yet implemented")]
    Unimplemented,
}

impl From<strata_chainexec::Error<WorkerError>> for WorkerError {
    fn from(err: strata_chainexec::Error<WorkerError>) -> Self {
        use strata_chainexec::Error as ExecError;
        match err {
            ExecError::Context(worker_err) => worker_err,
            _ => WorkerError::Exec(err.map_context(|e| Box::new(e) as _)),
        }
    }
}
