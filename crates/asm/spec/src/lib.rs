use strata_asm_common::{AsmSpec, GenesisProvider, Stage};
use strata_asm_proto_bridge_v1::{BridgeV1GenesisConfig, BridgeV1Subproto};
use strata_asm_proto_core::{CoreGenesisConfig, OLCoreSubproto};

// Include generated constants from build script
include!(concat!(env!("OUT_DIR"), "/generated.rs"));

/// ASM spec for the Strata protocol.
/// 
/// Configuration is loaded at compile time from asm_config.json (or environment-specific variants).
/// Magic bytes, genesis configurations, and other parameters are generated by the build script.
#[derive(Debug)]
pub struct StrataAsmSpec;

impl AsmSpec for StrataAsmSpec {
    const MAGIC_BYTES: strata_l1_txfmt::MagicBytes = MAGIC_BYTES;

    fn genesis_config_for<S: strata_asm_common::Subprotocol>() -> S::GenesisConfig
    where
        Self: GenesisProvider<S>,
    {
        <Self as GenesisProvider<S>>::genesis_config()
    }

    fn call_subprotocols(stage: &mut impl Stage<Self>) {
        stage.process_subprotocol::<OLCoreSubproto>();
        stage.process_subprotocol::<BridgeV1Subproto>();
    }
}

// Implement GenesisProvider for each subprotocol using generated config functions
impl GenesisProvider<OLCoreSubproto> for StrataAsmSpec {
    fn genesis_config() -> CoreGenesisConfig {
        CoreGenesisConfig::new(
            core_genesis::checkpoint_vk(),
            core_genesis::genesis_l1_block(),
            core_genesis::sequencer_pubkey(),
        ).expect("Failed to create CoreGenesisConfig from generated config")
    }
}

impl GenesisProvider<BridgeV1Subproto> for StrataAsmSpec {
    fn genesis_config() -> BridgeV1GenesisConfig {
        // Currently using default as bridge config is not fully implemented
        // Future: use bridge_genesis::* generated functions
        BridgeV1GenesisConfig::default()
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use strata_asm_common::AsmSpec;

    #[test]
    fn test_magic_bytes_from_config() {
        // Magic bytes should be loaded from configuration
        let magic = StrataAsmSpec::MAGIC_BYTES;
        
        // In default config, should be "ALPN"
        #[cfg(not(asm_config_env = "testnet"))]
        assert_eq!(&magic, b"ALPN");
        
        // In testnet config, should be "TEST"
        #[cfg(asm_config_env = "testnet")]
        assert_eq!(&magic, b"TEST");
    }

    #[test]
    fn test_genesis_config_from_config() {
        let core_config = StrataAsmSpec::genesis_config_for::<OLCoreSubproto>();
        
        // Verify that we can create a valid genesis config
        assert!(core_config.genesis_l1_block.height() > 0);
        
        // Different heights based on config
        #[cfg(not(asm_config_env = "testnet"))]
        assert_eq!(core_config.genesis_l1_block.height(), 100);
        
        #[cfg(asm_config_env = "testnet")]
        assert_eq!(core_config.genesis_l1_block.height(), 50);
    }
}