name: Run functional tests

on:
  workflow_call:

env:
  CARGO_TERM_COLOR: always

permissions: {}

jobs:
  extract-rust-version:
    name: Extract Rust toolchain version
    runs-on: ubuntu-latest
    outputs:
      rust-version: ${{ steps.extract.outputs.rust-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false

      - name: Extract Rust toolchain version
        id: extract
        uses: ./.github/actions/extract-rust-version # zizmor: ignore[unpinned-uses]

  lint:
    name: Lint test files
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        id: setup-python
        with:
          python-version: "^3.10" # Keep in sync with `pyproject.toml`

      - name: Install poetry
        uses: snok/install-poetry@76e04a911780d5b312d89783f7b1cd627778900a # v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          path: functional-tests/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        working-directory: functional-tests
        #if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true' # this was giving issues in cache
        run: poetry install --no-root --no-interaction

      - name: Check formatting
        working-directory: functional-tests
        run: poetry run ruff format --check

      - name: Lint
        working-directory: functional-tests
        run: poetry run ruff check

  run:
    name: Run functional tests
    runs-on: ubuntu-latest
    needs: extract-rust-version
    timeout-minutes: 60
    env:
      CARGO_TARGET_DIR: "target/llvm-cov-target"
      LLVM_PROFILE_FILE: "target/llvm-cov-target/strata-%p-%m.profraw"

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false

      - name: Cleanup Space
        uses: ./.github/actions/cleanup # zizmor: ignore[unpinned-uses]

      - name: Install bitcoind
        env:
          BITCOIND_VERSION: "29.0"
          BITCOIND_ARCH: "x86_64-linux-gnu"
        run: |
          curl -fsSLO --proto "=https" --tlsv1.2 "https://bitcoincore.org/bin/bitcoin-core-$BITCOIND_VERSION/bitcoin-$BITCOIND_VERSION-$BITCOIND_ARCH.tar.gz"
          curl -fsSLO --proto "=https" --tlsv1.2 "https://bitcoincore.org/bin/bitcoin-core-$BITCOIND_VERSION/SHA256SUMS"
          sha256sum --ignore-missing --check SHA256SUMS
          tar xzf "bitcoin-$BITCOIND_VERSION-$BITCOIND_ARCH.tar.gz"
          sudo install -m 0755 -t /usr/local/bin bitcoin-"$BITCOIND_VERSION"/bin/*
          bitcoind --version
          rm -rf SHA256SUMS "bitcoin-$BITCOIND_VERSION" "bitcoin-$BITCOIND_VERSION-$BITCOIND_ARCH.tar.gz"

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        id: setup-python
        with:
          python-version: "^3.10" # Keep in sync with `pyproject.toml`

      - name: Install poetry
        uses: snok/install-poetry@76e04a911780d5b312d89783f7b1cd627778900a # v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          path: functional-tests/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        working-directory: functional-tests
        #if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true' # this was giving issues in cache
        run: poetry install --no-root --no-interaction

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@a02741459ec5e501b9843ed30b535ca0a0376ae4 # nightly
        with:
          toolchain: ${{ needs.extract-rust-version.outputs.rust-version }}

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@9ca1734d8940023f074414ee621fd530c4ce10f2 # v2.55.3
        with:
          tool: cargo-llvm-cov

      - name: Rust cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2
        with:
          cache-on-failure: true

      - name: ls before
        run: ls -la target/llvm-cov-target

      - name: Build Cargo project
        env:
          RUSTFLAGS: "-Cinstrument-coverage"
        run: cargo build --locked -F debug-utils

      - name: ls after build
        run: ls -la target/llvm-cov-target

      - name: Run functional tests (1)
        id: funcTestsRun1
        continue-on-error: true
        env:
          NO_COLOR: "1"
          LOG_LEVEL: "info"
        run: |
          NEWPATH="$(realpath target/llvm-cov-target/debug)"
          export PATH="$NEWPATH:$PATH"
          which strata-client
          cd functional-tests && poetry run python entry.py

      # Run again just to be sure as some tests are flaky, with more logging
      - name: Run functional tests (2)
        id: funcTestsRun2
        if: steps.funcTestsRun1.outcome == 'failure'
        continue-on-error: true
        env:
          RUST_LOG: "trace,hyper=warn,soketto=warn,jsonrpsee-server=warn,mio=warn"
          NO_COLOR: "1"
          RUST_BACKTRACE: "1"
          LOG_LEVEL: "info"
        run: |
          NEWPATH="$(realpath target/llvm-cov-target/debug)"
          export PATH="$NEWPATH:$PATH"
          which strata-client
          cd functional-tests && poetry run python entry.py

      - name: ls after
        run: ls -la target/llvm-cov-target

      - name: Generate combined coverage lcov
        id: genFunctionalLcov
        continue-on-error: true
        env:
          # for llvm-cov
          CARGO_TARGET_DIR: "target"
        run: |
          cargo llvm-cov -F debug-utils report --lcov > lcov.functional.info

      - name: Upload coverage lcov artifact
        if: steps.genFunctionalLcov.outcome == 'success'
        continue-on-error: true
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: functional-lcov
          path: lcov.functional.info

      - name: Zip log files on failure
        if: steps.funcTestsRun2.outcome == 'failure'
        # Create a zip archive (logs.zip) that includes only service.log files,
        # preserving the folder structure starting from functional-tests/_dd
        # NOTE: Entire _dd ends up hundreds of MBs, so keep only logs (still huge...).
        run: |
          # service logs
          find functional-tests/_dd -type f -name "service.log" | zip -@ logs.zip
          # functional test logs
          zip -r logs.zip functional-tests/_dd -i '*/logs/*.log'

      - name: Upload logs as build artifact on failure
        if: steps.funcTestsRun2.outcome == 'failure'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: fntest_dd
          path: logs.zip
          retention-days: 30
          if-no-files-found: error
          compression-level: 0 # already compressed

      - name: Fail job if functional tests fail
        if: steps.funcTestsRun2.outcome == 'failure'
        run: |
          echo "Functional tests failed"
          exit 1


  functional-tests-success:
    name: Check that all checks pass
    runs-on: ubuntu-latest
    if: always()
    needs: [lint, run]
    timeout-minutes: 60
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@05ac9388f0aebcb5727afa17fcccfecd6f8ec5fe # release/v1
        with:
          jobs: ${{ toJSON(needs) }}
