# Runs unit tests.

name: Unit Tests

on:
  pull_request:
  merge_group:
  push:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions: {}

jobs:
  extract-rust-version:
    name: Extract Rust toolchain version
    runs-on: ubuntu-latest
    outputs:
      rust-version: ${{ steps.extract.outputs.rust-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false

      - name: Extract Rust toolchain version
        id: extract
        uses: ./.github/actions/extract-rust-version # zizmor: ignore[unpinned-uses]

  test:
    name: Run unit tests and generate report
    runs-on: ubuntu-latest
    needs: extract-rust-version
    timeout-minutes: 60 # better fail-safe than the default 360 in github actions
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false

      - name: Install bitcoind
        env:
          BITCOIND_VERSION: "29.0"
          BITCOIND_ARCH: "x86_64-linux-gnu"
        run: |
          curl -fsSLO --proto "=https" --tlsv1.2 "https://bitcoincore.org/bin/bitcoin-core-$BITCOIND_VERSION/bitcoin-$BITCOIND_VERSION-$BITCOIND_ARCH.tar.gz"
          curl -fsSLO --proto "=https" --tlsv1.2 "https://bitcoincore.org/bin/bitcoin-core-$BITCOIND_VERSION/SHA256SUMS"
          sha256sum --ignore-missing --check SHA256SUMS
          tar xzf "bitcoin-$BITCOIND_VERSION-$BITCOIND_ARCH.tar.gz"
          sudo install -m 0755 -t /usr/local/bin bitcoin-"$BITCOIND_VERSION"/bin/*
          bitcoind --version
          rm -rf SHA256SUMS "bitcoin-$BITCOIND_VERSION" "bitcoin-$BITCOIND_VERSION-$BITCOIND_ARCH.tar.gz"

      - name: Cleanup space
        uses: ./.github/actions/cleanup # zizmor: ignore[unpinned-uses]

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@a02741459ec5e501b9843ed30b535ca0a0376ae4 # nightly
        with:
          components: llvm-tools-preview
          toolchain: ${{ needs.extract-rust-version.outputs.rust-version }}
          
      - name: Install latest nextest release
        uses: taiki-e/install-action@9903ab6feadaec33945de535fe9d181b91802a55 # v2
        with:
          tool: nextest

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@9903ab6feadaec33945de535fe9d181b91802a55 # v2
        with:
          tool: cargo-llvm-cov

      - name: Rust cache
        uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2
        with:
          cache-on-failure: true

      - name: Run tests with coverage
        run: |
          cargo llvm-cov --workspace --locked nextest --profile ci --lcov --output-path lcov.info

      - name: Test Summary
        uses: test-summary/action@31493c76ec9e7aa675f1585d3ed6f1da69269a86 # v2
        if: always()
        with:
          paths: "target/nextest/ci/junit.xml"

      - name: Publish Test Coverage
        uses: codecov/codecov-action@ad3126e916f78f00edff4ed0317cf185271ccc2d # v5.4.2
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info

  doc:
    name: Run doc tests
    runs-on: ubuntu-latest
    needs: extract-rust-version
    env:
      RUST_BACKTRACE: 1
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          persist-credentials: false

      - name: Cleanup space
        uses: ./.github/actions/cleanup # zizmor: ignore[unpinned-uses]

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@a02741459ec5e501b9843ed30b535ca0a0376ae4 # nightly
        with:
          toolchain: ${{ needs.extract-rust-version.outputs.rust-version }}

      - name: Rust cache
        uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2
        with:
          cache-on-failure: true

      - name: Run doctests
        run: cargo test --doc --workspace

  unit-success:
    name: Check that unit tests pass
    runs-on: ubuntu-latest
    if: always()
    needs: [test, doc]
    timeout-minutes: 60
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@05ac9388f0aebcb5727afa17fcccfecd6f8ec5fe # release/v1
        with:
          jobs: ${{ toJSON(needs) }}
