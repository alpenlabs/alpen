name: Ethereum Execution Spec tests against staging docker.

on:
  #schedule:
  #  - cron: '0 15 * * *'  # Daily at 15:00 UTC
  pull_request:
  workflow_dispatch:      # Manual trigger (optional)

env:
  #CI: false
  COMMIT: ${{ github.sha }}

permissions: {}

jobs:
  setup-services-and-run-ef-tests:
    permissions:
      contents: read
      id-token: write
      pull-requests: read
    runs-on: ubuntu-latest
    environment:
      name: development
    timeout-minutes: 90 # TODO: change to 60 once the exex witness generation is optimized.
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        persist-credentials: false

    - name: Configure AWS ECR Details
      uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4
      with:
        role-to-assume: ${{ secrets.AWS_ECR_ROLE }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2
      with:
        mask-password: "true"

    - name: Pull latest Docker images from CD pipeline
      id: pull-images
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_PREFIX: ${{ vars.ECR_REPOSITORY_PREFIX }}
      run: |
        BINARIES=(
          "strata-client"
          "strata-sequencer-client"
          "alpen-reth"
        )
        
        for IMAGE in "${BINARIES[@]}"; do
          ECR_REPOSITORY="${ECR_REPOSITORY_PREFIX}/${IMAGE}"
          TAG=$(aws ecr describe-images \
            --repository-name "${ECR_REPOSITORY}" \
            --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' \
            --output text)
          echo "$TAG"
          IMG_URL="${ECR_REGISTRY}/${ECR_REPOSITORY}:${TAG}"
          docker pull "${IMG_URL}"
          docker tag "${IMG_URL}" "${IMAGE}:latest"
        done
    
    - name: List pulled Docker images
      run: |
        docker image list

    - name: Build params
      run: |
        # Install base58
        pip3 install base58

        # Build datatool with sp1 features
        cargo build --bin strata-datatool --release

        # Generate params: rollup_name := alpn, block_time := 1000
        cd docker && ./init-keys.sh ../target/release/strata-datatool -n alpn -t 1
        cd configs

        # reth/sequencer is taken from CD and is built with different config,
        # so we have to hack it here so the genesis matches.
        # Override the genesis hash
        jq '.evm_genesis_block_hash = "37ad61cff1367467a98cf7c54c4ac99e989f1fbb1bc1e646235e90c065c565ba"' params.json > tmp.json && mv tmp.json params.json

    - name: Build Prover Client image in native mode (releases/0.2.0)
      run: |
        # TODO(STR-1527): fetch the prover client image (in native mode) from ECR!
        mkdir -p docker/prover-client/elfs

        # Build prover
        docker build \
          --build-arg PROVER_FEATURES="default" \
          -t "strata-prover-client:latest" \
          -f "docker/prover-client/Dockerfile" .
    
    - name: Start services with Docker Compose
      run: |
        docker image list
        docker compose -f ./docker/docker-compose-testing.yml up -d

    - name: Wait for services to be ready
      run: |
        sleep 60 # Ideally need some healthchecks.
        EXITED_CONTAINERS=$(docker ps -a --filter "status=exited" --format '{{.Names}}')

        if [ -n "$EXITED_CONTAINERS" ]; then
          echo "❌ Found exited containers:"
          echo "$EXITED_CONTAINERS"

          for name in $EXITED_CONTAINERS; do
            echo -e "\n=== Logs for container: $name ==="
            docker logs "$name" || echo "(No logs)"
          done

          echo "❌ One or more containers have exited. Failing step."
          exit 1
        else
          echo "✅ All containers are running."
        fi

    - name: Run tests
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        git clone https://github.com/alpenlabs/execution-spec-tests
        cd execution-spec-tests
        uv python install 3.11
        uv python pin 3.11
        uv sync --all-extras
        uv run solc-select use 0.8.24 --always-install
        uv run execute remote \
          -m state_test \
          --fork=Shanghai \
          --rpc-endpoint=http://localhost:8545 \
          --rpc-seed-key 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80 \
          --rpc-chain-id 2892 \
          --tx-wait-timeout 30 \
          -v
      continue-on-error: true
    
    - name: Generate a proof of EE blocks execution.
      working-directory: docker
      run: |
        chmod +x test_ee_proof.sh
        ./test_ee_proof.sh docker

    - name: Tear down services
      if: always()
      run: |
        docker logs strata_prover_client
        docker compose -f ./docker/docker-compose-testing.yml down
