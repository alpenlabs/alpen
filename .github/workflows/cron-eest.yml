name: Daily EEST

#on:
#  schedule:
#    - cron: '0 3 * * *' # runs daily at 3:00 UTC
#  workflow_dispatch:     # allows manual trigger


# TODO: clean this up.
on:
  pull_request:
  merge_group:
  push:
    branches: [main]

env:
  CI: false
  COMMIT: ${{ github.sha }}

permissions:
  contents: read
  pull-requests: read

jobs:
  ecr-pull-and-test:
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    environment:
      name: development
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        persist-credentials: false

    - name: Configure AWS ECR Details
      uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4
      with:
        role-to-assume: ${{ secrets.AWS_ECR_ROLE }}
        aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2
      with:
        mask-password: "true"

    - name: Pull latest Docker image
      id: pull-images
      # Pull images for all the required binaries.
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_PREFIX: ${{ vars.ECR_REPOSITORY_PREFIX }}
      run: |
        BINARIES=("strata-client", "strata-sequencer-client", "alpen-reth", "prover-client")
        
        for IMAGE in "${BINARIES[@]}"; do
          ECR_REPOSITORY="${ECR_REPOSITORY_PREFIX}/${IMAGE}"
          TAG=$(aws ecr describe-images \
            --repository-name ${ECR_REPOSITORY} \
            --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' \
            --output text)
          IMG_URL="${ECR_REGISTRY}/${ECR_REPOSITORY}:${TAG}"
          docker pull "${IMG_URL}"
          docker tag "${IMG_URL}" "${IMAGE}:latest"
        done

    - name: Start services with Docker Compose
      run: |
        docker compose -f ./docker/docker-compose-testing.yml down || true
        docker compose -f ./docker/docker-compose-testing.yml up -d

    - name: Wait for services to be ready
      run: |
        sleep 10  # Replace with healthcheck logic if needed

    - name: Run tests
      run: |
        ./docker/run-tests.sh  # Or `pytest`, `curl`, etc.

    - name: Tear down services
      if: always()
      run: docker compose -f ./docker/docker-compose-testing.yml down
